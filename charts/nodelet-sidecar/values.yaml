# nameOverride -- Override name of app
nameOverride:  # ""

# fullnameOverride -- Override the full qualified app name
fullnameOverride:  # ""

## global -- Globally shared configuration
global:
  # global.additionalLabels -- Common labels for the all resources
  additionalLabels: {}
  # app: udpfw-nodelet

## nodelet -- Nodelet configuration
nodelet:

  ## nodelet.image -- Define the image to work with
  image:
    # nodelet.image.repository -- Repository to use
    repository: ghcr.io/udpfw/udpfw

    # nodelet.image.tag -- Overrides the global Helm image tag whose default is the chart appVersion
    tag: ""

    # nodelet.image.pullPolicy -- Image pullPolicy
    pullPolicy: IfNotPresent


  deployment:
    # nodelet.deployment.replicas -- How many replicas should be deployed
    replicas: 3

    # nodelet.deployment.autoscaling -- Nodelet Horizontal Pod Autoscaler
    autoscaling:
      # nodelet.deployment.autoscaling.enabled -- Enable Horizontal Pod Autoscaler ([HPA])
      enabled: false
      # nodelet.deployment.autoscaling.minReplicas -- Minimum number of replicas for the Nodelet [HPA]
      minReplicas: 1
      # nodelet.deployment.autoscaling.maxReplicas -- Maximum number of replicas for the Nodelet [HPA]
      maxReplicas: 5
      # nodelet.deployment.autoscaling.targetCPUUtilizationPercentage -- Average CPU utilization percentage for the Nodelet [HPA]
      targetCPUUtilizationPercentage: 50
      # nodelet.deployment.autoscaling.targetMemoryUtilizationPercentage -- Average memory utilization percentage for the Nodelet [HPA]
      targetMemoryUtilizationPercentage: 50
      # nodelet.deployment.autoscaling.behavior -- Configures the scaling behavior of the target in both Up and Down directions.
      behavior: { }
        # scaleDown:
        #  stabilizationWindowSeconds: 300
        #  policies:
        #   - type: Pods
        #     value: 1
        #     periodSeconds: 180
        # scaleUp:
        #   stabilizationWindowSeconds: 300
        #   policies:
        #   - type: Pods
      #     value: 2
      #     periodSeconds: 60

      # nodelet.deployment.autoscaling.metrics -- Configures custom HPA metrics for the Nodelet
      # Ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
      metrics: []

  # nodelet.service -- Nodelet service configuration
  service:
    # nodelet.service.enabled -- Enable/Disable Nodelet service
    enabled: true

    # nodelet.service.additionalLabels -- Add extra labels to the service
    additionalLabels: {}

    # nodelet.service.type -- Service Type
    type: ClusterIP

    # nodelet.service.clusterIP -- Service clusterIP. `None` makes a "headless service" (no virtual IP)
    clusterIP: ""

    # nodelet.service.ports -- Service Extra Ports
    ports: []

  # nodelet.annotations -- Adds annotations to the deployment
  annotations: {}
  # nodelet.labels -- Adds labels to the deployment
  labels: {}
  # nodelet.revisionHistoryLimit -- The number of ControllerRevision to keep in this Deployment.
  revisionHistoryLimit: 1

  # nodelet.updateStrategy -- Allow the Deployment to perform a rolling update on helm update

  ## ref: https://kubernetes.io/docs/tasks/manage-daemon/update-daemon-set/
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: "10%"

  container:
    # nodelet.container.iface -- The interface name from which UDP packets will be captured
    iface: "eth0"

    # nodelet.container.dispatchAddress -- "IP and port to the Dispatch service running on the local cluster"
    dispatchAddress: ""

    # nodelet.container.enableDebugLog -- Enable log in debug level
    enableDebugLog: false

    # nodelet.container.namespace -- Namespace to listen to
    namespace: "global"

    # nodelet.container.lifecycle -- Allows you to configure a lifecycle policy
    lifecycle:
      postStart:
        exec:
          command:
            - bash
            - -c
            - "sleep 5"

    # nodelet.container.securityContext -- Allows you to overwrite the default PodSecurityContext
    securityContext:
    #  capabilities:
    #    add:
    #      - NET_ADMIN
    #  privileged: true

    # nodelet.container.ports -- Allows to specify extra ports (hostPorts for instance) for this container
    ports: []

    # nodelet.container.resources -- Resource requests and limits for this container.
    resources: {}
    #  requests:
    #    cpu: 200m
    #    memory: 256Mi
    #  limits:
    #    cpu: 200m
    #    memory: 256Mi

    # nodelet.container.livenessProbe -- Add liveness probe settings
    # @default -- Every 15s / 6 KO / 1 OK
    livenessProbe: {}

    # nodelet.container.readinessProbe -- Add readiness probe settings
    readinessProbe: {}

    # nodelet.container.env -- Additional environment variables for this container
    env: []

    # nodelet.container.envFrom -- Set environment variables specific to container from configMaps and/or secrets
    envFrom: []
    #   - configMapRef:
    #       name: <CONFIGMAP_NAME>
    #   - secretRef:
    #       name: <SECRET_NAME>

    # nodelet.container.envDict -- Set environment variables specific to this container defined in a dict
    envDict: {}
    #   <ENV_VAR_NAME>: <ENV_VAR_VALUE>

  # nodelet.additionalContainers -- Additional containers to be added in the pod
  additionalContainers:
  #  - name: ubuntu
  #    image: ubuntu:jammy
  #    command: [ "/bin/sh" , "-c", "tail -f /dev/null" ]


  pod:
    # nodelet.pod.annotations -- Adds annotations to the deployment pod
    annotations: {}
    # nodelet.pod.labels -- Adds labels to the deployment pod
    labels: {}

    # nodelet.pod.useHostNetwork -- Bind ports on the hostNetwork

    ## Useful for CNI networking where hostPort might
    ## not be supported. The ports need to be available on all hosts. It Can be
    ## used for custom metrics instead of a service endpoint.
    ##
    ## WARNING: Make sure that hosts using this are properly firewalled otherwise
    ## metrics and traces are accepted from any host able to connect to this host.
    useHostNetwork: false

    # nodelet.pod.dnsPolicy -- Pod's DNS policy

    ## See https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy
    dnsPolicy: "ClusterFirst"

    # nodelet.pod.imagePullSecrets -- Repository pullSecret (ex: specify docker registry credentials)

    ## See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
    imagePullSecrets: []
    #   - name: "<REG_SECRET>"

    # nodelet.pod.tolerations -- Allow the Deployment to schedule on tainted nodes (requires Kubernetes >= 1.6)
    tolerations: []

    # nodelet.pod.nodeSelector -- Allow the Deployment to schedule on selected nodes

    ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
    nodeSelector: {}

    # nodelet.pod.topologySpreadConstraints -- Allow  to instruct the kube-scheduler how to place each incoming Pod in relation to the existing Pods across your cluster.

    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
    topologySpreadConstraints: []

    # nodelet.pod.affinity -- Allow the Deployment to schedule using affinity rules

    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    affinity: {}

  # nodelet.serviceAccount -- Service Account configuration
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # Labels to add to the service account
    labels: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""
